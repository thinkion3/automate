name: Android Appium Instagram Bot

on:
  workflow_dispatch:

jobs:
  run-android-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update -y
          
          # Install basic dependencies
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo apt-get install -y python3-pip unzip curl wget openjdk-11-jdk
          
          # Enable 32-bit architecture for Android emulator
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          
          # Install common 32-bit libraries (excluding libgl1-mesa-glx:i386 here, as it's often a transitional package)
          sudo apt-get install -y \
            libc6:i386 \
            libstdc++6:i386 \
            lib32z1 \
            libbz2-1.0:i386 \
            libx11-6:i386 \
            libxext6:i386 \
            libxrender1:i386 \
            libxtst6:i386 \
            libxi6:i386 \
            libglu1-mesa:i386 \
            libpulse0:i386
          
          echo "✅ Basic system dependencies installed"

      - name: Install libncurses5:i386 workaround
        run: |
          echo "Attempting to install libncurses5:i386..."
          # First, try to install directly (might work if repo changes or on different Ubuntu versions)
          sudo apt-get install -y libncurses5:i386 || {
            echo "Direct installation of libncurses5:i386 failed. Proceeding with manual download from Ubuntu 22.04 archives."
            # Download libtinfo5:i386 (dependency for libncurses5) from Ubuntu 22.04 security updates
            wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2ubuntu0.1_i386.deb -O libtinfo5_i386.deb
            # Download libncurses5:i386 from Ubuntu 22.04 security updates
            wget http://security.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.3-2ubuntu0.1_i386.deb -O libncurses5_i386.deb

            # Install the downloaded packages
            sudo dpkg -i libtinfo5_i386.deb libncurses5_i386.deb || {
              echo "dpkg installation failed. Attempting to fix broken dependencies."
              sudo apt-get install -f -y
              # Try dpkg install again after fixing dependencies
              sudo dpkg -i libtinfo5_i386.deb libncurses5_i386.deb
            }
          }
          echo "✅ libncurses5:i386 (or equivalent) installed"

      - name: Install libgl1-mesa-glx:i386 and libdrm:i386 workaround
        run: |
          echo "Attempting to install libgl1-mesa-glx:i386 and libdrm:i386 dependencies from Ubuntu 22.04 archives..."
          # Download required i386 packages from Ubuntu 22.04 (Jammy Jellyfish) security archives
          # These are core Mesa components for OpenGL. Using versions found to be stable for 22.04.
          wget http://security.ubuntu.com/ubuntu/pool/main/m/mesa/libglapi-mesa_22.2.5-0ubuntu0.1~22.04.1_i386.deb -O libglapi-mesa_i386.deb
          wget http://security.ubuntu.com/ubuntu/pool/main/m/mesa/libgl1-mesa-dri_22.2.5-0ubuntu0.1~22.04.1_i386.deb -O libgl1-mesa-dri_i386.deb

          # libdrm packages (Direct Rendering Manager). Using versions found to be stable for 22.04.
          wget http://security.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm2_2.4.113-2~ubuntu0.22.04.1_i386.deb -O libdrm2_i386.deb
          wget http://security.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-intel1_2.4.113-2~ubuntu0.22.04.1_i386.deb -O libdrm-intel1_i386.deb
          wget http://security.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-nouveau2_2.4.113-2~ubuntu0.22.04.1_i386.deb -O libdrm-nouveau2_i386.deb
          wget http://security.ubuntu.com/ubuntu/pool/main/libd/libdrm/libdrm-radeon1_2.4.113-2~ubuntu0.22.04.1_i386.deb -O libdrm-radeon1_i386.deb

          # Install the downloaded packages
          sudo dpkg -i \
            libglapi-mesa_i386.deb \
            libgl1-mesa-dri_i386.deb \
            libdrm2_i386.deb \
            libdrm-intel1_i386.deb \
            libdrm-nouveau2_i386.deb \
            libdrm-radeon1_i386.deb || {
            echo "dpkg installation of libgl/libdrm packages failed. Attempting to fix broken dependencies."
            sudo apt-get install -f -y
            # Try dpkg install again after fixing dependencies
            sudo dpkg -i \
              libglapi-mesa_i386.deb \
              libgl1-mesa-dri_i386.deb \
              libdrm2_i386.deb \
              libdrm-intel1_i386.deb \
              libdrm-nouveau2_i386.deb \
              libdrm-radeon1_i386.deb
          }
          echo "✅ libglapi-mesa:i386, libgl1-mesa-dri:i386 and libdrm:i386 dependencies installed"

      - name: Setup Android SDK
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip
          mv cmdline-tools latest
          
          # Set environment variables
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/emulator" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Install Android SDK components
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Accept licenses first
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          
          # Update SDK manager
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --update
          
          # Install SDK components with fallback to different API levels
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "emulator" \
            "build-tools;30.0.3"
          
          # Try multiple API levels for better compatibility
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-30" \
            "system-images;android-30;google_apis;x86_64" || \
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-29" \
            "system-images;android-29;google_apis;x86_64" || \
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-28" \
            "system-images;android-28;google_apis;x86_64"
          
          echo "✅ Android SDK components installed"

      - name: Create AVD
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Determine which system image is available
          if $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --list | grep -q "system-images;android-30;google_apis;x86_64"; then
            SYSTEM_IMAGE="system-images;android-30;google_apis;x86_64"
            API_LEVEL="30"
          elif $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --list | grep -q "system-images;android-29;google_apis;x86_64"; then
            SYSTEM_IMAGE="system-images;android-29;google_apis;x86_64"
            API_LEVEL="29"
          else
            SYSTEM_IMAGE="system-images;android-28;google_apis;x86_64"
            API_LEVEL="28"
          fi
          
          echo "Using system image: $SYSTEM_IMAGE"
          
          # Create AVD with detected system image
          echo "no" | $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager create avd \
            -n test_avd \
            -k "$SYSTEM_IMAGE" \
            --force \
            -c 2048M
          
          # Save API level for later use
          echo "ANDROID_API_LEVEL=$API_LEVEL" >> $GITHUB_ENV
          
          echo "✅ AVD created with API level $API_LEVEL"

      - name: Start Android Emulator
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Check available AVDs
          echo "=== Available AVDs ==="
          $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager list avd
          
          # Start emulator with software rendering (
