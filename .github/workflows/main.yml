name: Android Appium Instagram Bot

on:
  workflow_dispatch:

jobs:
  run-android-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Reduced from 45 minutes

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install minimal system dependencies
        run: |
          # Only install absolutely essential packages
          sudo apt-get update -y
          sudo apt-get install -y unzip curl wget
          
          # Enable 32-bit architecture (required for ARM emulator)
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          
          # Install only critical 32-bit libraries
          sudo apt-get install -y libc6:i386 libstdc++6:i386 lib32z1 || echo "Some packages failed, continuing..."
          
          echo "‚úÖ Minimal dependencies installed"

      - name: Setup Android SDK (Cached)
        run: |
          # Use smaller command line tools download
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          
          # Download and extract quickly
          curl -s https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip
          mv cmdline-tools latest
          rm cmdtools.zip
          
          # Set environment variables
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/emulator" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
          
          echo "‚úÖ Android SDK setup completed"

      - name: Install minimal Android SDK components
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Accept licenses quickly
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null 2>&1
          
          # Install only essential components with fastest options
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "emulator" \
            "platforms;android-28" \
            "system-images;android-28;google_apis;x86_64" \
            --verbose
          
          echo "‚úÖ Minimal Android SDK components installed"

      - name: Create lightweight AVD
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Create minimal AVD
          echo "no" | $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager create avd \
            -n fast_avd \
            -k "system-images;android-28;google_apis;x86_64" \
            --force \
            -c 1024M
          
          # Configure AVD for maximum speed
          echo "hw.cpu.ncore=2" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.ramSize=2048" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.gpu.enabled=yes" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.camera.back=none" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.camera.front=none" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.gps=no" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.sensors.proximity=no" >> $HOME/.android/avd/fast_avd.avd/config.ini
          echo "hw.sensors.orientation=no" >> $HOME/.android/avd/fast_avd.avd/config.ini
          
          echo "‚úÖ Lightweight AVD created"

      - name: Start ultra-fast Android emulator
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Start emulator with maximum speed optimizations
          nohup $HOME/android-sdk/emulator/emulator \
            -avd fast_avd \
            -no-window \
            -no-audio \
            -no-snapshot \
            -no-boot-anim \
            -gpu swiftshader_indirect \
            -memory 2048 \
            -cores 2 \
            -partition-size 1024 \
            -camera-back none \
            -camera-front none \
            > emulator.log 2>&1 &
          
          echo "‚è≥ Starting ultra-fast emulator (should take 3-5 minutes)..."
          
          # Wait for device with timeout
          timeout 300 $HOME/android-sdk/platform-tools/adb wait-for-device || {
            echo "‚ùå Emulator failed to start within 5 minutes"
            cat emulator.log
            exit 1
          }
          
          # Wait for boot completion with timeout
          timeout 180 sh -c 'while [[ -z $($HOME/android-sdk/platform-tools/adb shell getprop sys.boot_completed 2>/dev/null) ]]; do sleep 2; done' || {
            echo "‚ùå Emulator failed to boot completely"
            exit 1
          }
          
          # Quick verification
          echo "=== Emulator Status ==="
          $HOME/android-sdk/platform-tools/adb devices
          $HOME/android-sdk/platform-tools/adb shell getprop ro.build.version.release
          
          echo "‚úÖ Ultra-fast Android emulator started successfully!"

      - name: Setup Appium quickly
        run: |
          # Install Appium with minimal configuration
          npm install -g appium@2.0.0 --silent
          appium driver install uiautomator2 --silent
          
          # Start Appium server
          nohup appium server --port 4723 --allow-insecure chromedriver_autodownload --log-level error > appium.log 2>&1 &
          
          # Quick wait for Appium
          sleep 5
          curl -f http://localhost:4723/status > /dev/null 2>&1 || echo "Appium starting..."
          
          echo "‚úÖ Appium server started"

      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then
            npm install --silent
          else
            echo "‚ö†Ô∏è No package.json found"
          fi

      - name: Run Instagram Bot
        run: |
          echo "ü§ñ Running Instagram Bot..."
          
          # Add your bot execution here
          if [ -f bot.js ]; then
            node bot.js
          elif [ -f src/bot.js ]; then
            node src/bot.js
          elif [ -f index.js ]; then
            node index.js
          else
            echo "‚ö†Ô∏è No bot script found. Add your bot execution command here."
            echo "Emulator is ready for testing!"
            
            # Test that everything works
            $HOME/android-sdk/platform-tools/adb shell input tap 100 100
            echo "‚úÖ Test tap successful - emulator is responsive"
          fi

      - name: Cleanup
        if: always()
        run: |
          echo "=== Final Logs ==="
          if [ -f emulator.log ]; then
            echo "Last 20 lines of emulator log:"
            tail -n 20 emulator.log
          fi
          
          # Cleanup processes
          pkill -f emulator || true
          pkill -f appium || true
          
          echo "‚úÖ Cleanup completed"        echo "‚úÖ Cleanup completed"
