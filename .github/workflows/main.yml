name: Android Appium Instagram Bot

on:
  workflow_dispatch:

jobs:
  run-android-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update -y
          
          # Install basic dependencies
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo apt-get install -y python3-pip unzip curl wget openjdk-11-jdk
          
          # Enable 32-bit architecture for Android emulator
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          
          echo "‚úÖ Basic system dependencies installed"

      - name: Install 32-bit libraries with improved approach
        run: |
          # Install essential 32-bit libraries that are commonly available
          sudo apt-get install -y \
            libc6:i386 \
            libstdc++6:i386 \
            lib32z1 \
            lib32stdc++6 \
            libbz2-1.0:i386 \
            libx11-6:i386 \
            libxext6:i386 \
            libxrender1:i386 \
            libxtst6:i386 \
            libxi6:i386 \
            libpulse0:i386 \
            libdbus-1-3:i386 \
            libfontconfig1:i386 \
            libfreetype6:i386 \
            libpng16-16:i386 || echo "Some 32-bit packages may not be available, continuing..."
          
          echo "‚úÖ Essential 32-bit libraries installed"

      - name: Install libncurses5:i386 with fallback
        run: |
          echo "Attempting to install libncurses5:i386..."
          
          # Try direct installation first
          if sudo apt-get install -y libncurses5:i386 libtinfo5:i386; then
            echo "‚úÖ libncurses5:i386 installed directly"
          else
            echo "Direct installation failed, trying alternative approach..."
            
            # Try installing libncurses6 as fallback (newer version that might be available)
            if sudo apt-get install -y libncurses6:i386 libtinfo6:i386; then
              echo "‚úÖ libncurses6:i386 installed as fallback"
            else
              echo "‚ö†Ô∏è Could not install libncurses, but continuing (may work with emulator)"
            fi
          fi

      - name: Install Mesa and DRM libraries with fallback
        run: |
          echo "Attempting to install Mesa and DRM libraries..."
          
          # Try to install the packages directly from current repositories
          if sudo apt-get install -y \
            libgl1-mesa-glx:i386 \
            libgl1-mesa-dri:i386 \
            libdrm2:i386 \
            mesa-utils; then
            echo "‚úÖ Mesa and DRM libraries installed directly"
          else
            echo "Direct installation failed, trying individual packages..."
            
            # Try installing packages individually
            sudo apt-get install -y libdrm2:i386 || echo "libdrm2:i386 failed"
            sudo apt-get install -y libgl1-mesa-dri:i386 || echo "libgl1-mesa-dri:i386 failed"
            sudo apt-get install -y mesa-utils || echo "mesa-utils failed"
            
            # Install software rendering fallback
            sudo apt-get install -y \
              libglapi-mesa:i386 \
              libglu1-mesa:i386 || echo "Software rendering packages failed"
            
            echo "‚úÖ Installed available Mesa components with fallbacks"
          fi

      - name: Setup Android SDK
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip
          mv cmdline-tools latest
          
          # Set environment variables
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/emulator" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH
          
          echo "‚úÖ Android SDK setup completed"

      - name: Install Android SDK components
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Accept licenses first
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          
          # Update SDK manager
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --update
          
          # Install essential SDK components
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "emulator" \
            "build-tools;30.0.3"
          
          # Install platform and system image with fallback
          if $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-30" \
            "system-images;android-30;google_apis;x86_64"; then
            echo "ANDROID_API_LEVEL=30" >> $GITHUB_ENV
            echo "SYSTEM_IMAGE=system-images;android-30;google_apis;x86_64" >> $GITHUB_ENV
          elif $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platforms;android-29" \
            "system-images;android-29;google_apis;x86_64"; then
            echo "ANDROID_API_LEVEL=29" >> $GITHUB_ENV
            echo "SYSTEM_IMAGE=system-images;android-29;google_apis;x86_64" >> $GITHUB_ENV
          else
            $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
              "platforms;android-28" \
              "system-images;android-28;google_apis;x86_64"
            echo "ANDROID_API_LEVEL=28" >> $GITHUB_ENV
            echo "SYSTEM_IMAGE=system-images;android-28;google_apis;x86_64" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Android SDK components installed"

      - name: Create AVD
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          echo "Using system image: $SYSTEM_IMAGE"
          echo "Using API level: $ANDROID_API_LEVEL"
          
          # Create AVD with detected system image
          echo "no" | $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager create avd \
            -n test_avd \
            -k "$SYSTEM_IMAGE" \
            --force \
            -c 2048M
          
          echo "‚úÖ AVD created with API level $ANDROID_API_LEVEL"

      - name: Start Android Emulator
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Check available AVDs
          echo "=== Available AVDs ==="
          $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager list avd
          
          # Start emulator with software rendering and additional flags for GitHub Actions
          nohup $HOME/android-sdk/emulator/emulator \
            -avd test_avd \
            -no-window \
            -no-audio \
            -no-snapshot \
            -gpu swiftshader_indirect \
            -camera-back none \
            -camera-front none \
            -memory 2048 \
            -partition-size 4096 \
            > emulator.log 2>&1 &
          
          # Wait for emulator to start
          echo "Waiting for emulator to start..."
          $HOME/android-sdk/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
          
          # Verify emulator is running
          echo "=== Emulator Status ==="
          $HOME/android-sdk/platform-tools/adb devices
          
          # Show emulator info
          $HOME/android-sdk/platform-tools/adb shell getprop ro.build.version.release
          $HOME/android-sdk/platform-tools/adb shell getprop ro.product.model
          
          echo "‚úÖ Android emulator started successfully"

      - name: Install Node.js dependencies
        run: |
          if [ -f package.json ]; then
            npm install
            echo "‚úÖ Node.js dependencies installed"
          else
            echo "‚ö†Ô∏è No package.json found, skipping npm install"
          fi

      - name: Setup Appium
        run: |
          # Install Appium globally
          npm install -g appium@2.0.0
          
          # Install UiAutomator2 driver for Android
          appium driver install uiautomator2
          
          # Start Appium server in background
          nohup appium server --port 4723 --allow-insecure chromedriver_autodownload > appium.log 2>&1 &
          
          # Wait for Appium to start
          sleep 10
          
          # Verify Appium is running
          curl -f http://localhost:4723/status || echo "Appium status check failed"
          
          echo "‚úÖ Appium server started"

      - name: Run Instagram Bot
        run: |
          # Add your bot script execution here
          echo "ü§ñ Running Instagram Bot..."
          
          # Example: If you have a Node.js script
          if [ -f bot.js ]; then
            node bot.js
          elif [ -f src/bot.js ]; then
            node src/bot.js
          elif [ -f index.js ]; then
            node index.js
          else
            echo "‚ö†Ô∏è No bot script found. Please add your bot execution command here."
            echo "Available files:"
            ls -la
          fi

      - name: Cleanup and Logs
        if: always()
        run: |
          echo "=== Emulator Logs ==="
          if [ -f emulator.log ]; then
            tail -n 50 emulator.log
          fi
          
          echo "=== Appium Logs ==="
          if [ -f appium.log ]; then
            tail -n 50 appium.log
          fi
          
          echo "=== Cleanup ==="
          # Kill emulator and appium processes
          pkill -f emulator || true
          pkill -f appium || true
          
          echo "‚úÖ Cleanup completed"
