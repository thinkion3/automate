name: Android Appium Instagram Bot

on:
  workflow_dispatch:

jobs:
  run-android-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Java 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install system dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils
          sudo apt-get install -y python3-pip unzip curl wget openjdk-11-jdk
          
          # Enable 32-bit architecture for Android emulator
          sudo dpkg --add-architecture i386
          sudo apt-get update -y
          
          # Install 32-bit libraries required for Android emulator
          sudo apt-get install -y libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1 libbz2-1.0:i386
          sudo apt-get install -y libx11-6:i386 libxext6:i386 libxrender1:i386 libxtst6:i386 libxi6:i386
          sudo apt-get install -y libgl1-mesa-glx:i386 libglu1-mesa:i386 libpulse0:i386

      - name: Setup Android SDK
        run: |
          mkdir -p $HOME/android-sdk/cmdline-tools
          cd $HOME/android-sdk/cmdline-tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdtools.zip
          unzip -q cmdtools.zip
          mv cmdline-tools latest
          
          # Set environment variables
          echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
          echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$HOME/android-sdk/emulator" >> $GITHUB_PATH
          echo "$HOME/android-sdk/platform-tools" >> $GITHUB_PATH

      - name: Install Android SDK components
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --update
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "emulator" \
            "system-images;android-30;google_apis;x86_64" \
            "build-tools;30.0.3"

      - name: Create AVD
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          echo "no" | $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager create avd \
            -n test_avd \
            -k "system-images;android-30;google_apis;x86_64" \
            --force \
            -c 2048M

      - name: Start Android Emulator
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$HOME/android-sdk
          
          # Setup KVM permissions
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          sudo usermod -a -G kvm $USER
          
          # Check available system images
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --list | grep system-images
          
          # Start emulator with more conservative settings
          nohup $HOME/android-sdk/emulator/emulator @test_avd \
            -no-window \
            -no-audio \
            -gpu auto \
            -no-boot-anim \
            -memory 2048 \
            -cores 2 \
            -accel on \
            -netdelay none \
            -netspeed full \
            -qemu -m 2048 \
            > emulator.log 2>&1 &
          
          # Wait for device with better error handling
          echo "‚è≥ Waiting for emulator to start..."
          for i in {1..60}; do
            if $HOME/android-sdk/platform-tools/adb devices | grep -q emulator; then
              echo "üì± Emulator detected"
              break
            fi
            echo "Waiting... ($i/60)"
            sleep 5
          done
          
          # Wait for boot complete with timeout
          echo "‚è≥ Waiting for boot to complete..."
          for i in {1..60}; do
            boot_completed=$($HOME/android-sdk/platform-tools/adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r\n')
            if [ "$boot_completed" = "1" ]; then
              echo "‚úÖ Boot completed"
              break
            fi
            echo "Boot status: $boot_completed ($i/60)"
            sleep 5
          done
          
          # Additional setup
          $HOME/android-sdk/platform-tools/adb shell input keyevent 82 || true
          $HOME/android-sdk/platform-tools/adb shell wm density 160 || true
          $HOME/android-sdk/platform-tools/adb shell settings put global window_animation_scale 0 || true
          $HOME/android-sdk/platform-tools/adb shell settings put global transition_animation_scale 0 || true
          $HOME/android-sdk/platform-tools/adb shell settings put global animator_duration_scale 0 || true
          
          echo "‚úÖ Emulator setup complete"
          $HOME/android-sdk/platform-tools/adb devices -l

      - name: Install Instagram APK
        run: |
          # Download Instagram APK
          wget -q "https://github.com/Alex313031/ig-apk/releases/download/latest/Instagram_v320.0.0.12.116.apk" -O instagram.apk
          
          # Install APK
          $HOME/android-sdk/platform-tools/adb install -r instagram.apk
          
          # Verify installation
          $HOME/android-sdk/platform-tools/adb shell pm list packages | grep instagram
          echo "‚úÖ Instagram APK installed"

      - name: Install Appium and dependencies
        run: |
          # Install Python dependencies
          pip3 install --upgrade pip
          pip3 install Appium-Python-Client==3.1.0 selenium==4.15.2
          
          # Install Appium 2.x
          npm install -g appium@2.2.1
          
          # Install UiAutomator2 driver
          appium driver install uiautomator2
          
          # Verify installations
          appium --version
          appium driver list
          
          echo "‚úÖ Appium and dependencies installed successfully"

      - name: Start Appium Server
        run: |
          # Start Appium server in background with proper logging
          nohup appium server \
            --port 4723 \
            --allow-insecure chromedriver_autodownload \
            --relaxed-security \
            --log-timestamp \
            --log-no-colors \
            > appium.log 2>&1 &
          
          # Wait for Appium server to start with better error handling
          echo "‚è≥ Starting Appium server..."
          for i in {1..24}; do
            if curl -s http://localhost:4723/status > /dev/null 2>&1; then
              echo "‚úÖ Appium server is ready"
              break
            fi
            echo "Waiting for Appium server... ($i/24)"
            sleep 5
          done
          
          # Verify server is running
          if ! curl -s http://localhost:4723/status > /dev/null 2>&1; then
            echo "‚ùå Appium server failed to start"
            echo "=== Appium Log ==="
            cat appium.log || echo "No appium log found"
            exit 1
          fi
          
          echo "üöÄ Appium server status:"
          curl -s http://localhost:4723/status | head -20

      - name: Debug Environment
        run: |
          echo "=== System Information ==="
          uname -a
          cat /proc/version
          
          echo "=== Java Version ==="
          java -version
          
          echo "=== Node Version ==="
          node --version
          npm --version
          
          echo "=== Python Version ==="
          python3 --version
          pip3 --version
          
          echo "=== Android SDK ==="
          ls -la $HOME/android-sdk/ || echo "Android SDK directory not found"
          
          echo "=== Available System Images ==="
          $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --list | grep "system-images;android-30" || echo "No system images found"
          
          echo "=== AVD List ==="
          $HOME/android-sdk/cmdline-tools/latest/bin/avdmanager list avd || echo "No AVDs found"
          
          echo "=== KVM Check ==="
          ls -la /dev/kvm || echo "KVM not available"
          
          echo "=== Process List ==="
          ps aux | grep -E "(emulator|appium)" || echo "No emulator/appium processes found"

      - name: Run Instagram Bot
        env:
          IG_USERNAME: ${{ secrets.IG_USERNAME }}
          IG_PASSWORD: ${{ secrets.IG_PASSWORD }}
        run: |
          echo "ü§ñ Starting Instagram bot..."
          python3 appium_bot.py

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: |
            emulator.log
            appium.log
